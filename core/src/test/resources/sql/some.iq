# some.iq - Queries with quantifiers SOME (aka ANY) and ALL
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use scott
!set expand false
!set outputformat mysql

# Both sides NOT NULL
select * from "scott".emp
where empno > any (select deptno from "scott".dept);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

# ANY; left side NOT NULL, right side nullable.
select * from "scott".emp
where sal > any (select comm from "scott".emp);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

# ALL; left side NOT NULL, right side nullable.
select * from "scott".emp
where sal > all (select comm from "scott".emp);

+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

# Previous, as scalar sub-query
select *, sal > all (select comm from "scott".emp) as x
from "scott".emp;

java.sql.SQLException: Error while executing SQL "select *, sal > all (select comm from "scott".emp) as x
from "scott".emp": Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable().aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, Object[] in) {
      final java.math.BigDecimal inp6_ = in[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(in[6]);
      if (inp6_ != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, inp6_);
      }
      acc.f2++;
      if (inp6_ != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final java.math.BigDecimal inp8_0 = current[8] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[8]);
              final java.math.BigDecimal inp0_ = current[0] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[0]);
              final boolean v4 = inp1_ == 0L;
              final long inp2_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[2]);
              final boolean v10 = inp1_ > inp2_;
              return new Object[] {
                  current[3],
                  current[4],
                  current[5],
                  current[6],
                  current[7],
                  current[8],
                  current[9],
                  current[10],
(                  !(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || v4) && (inp8_0 == null || inp0_ == null || org.apache.calcite.runtime.SqlFunctions.gt(inp8_0, inp0_) || v4 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) || v10) ? (null || (!(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || v4 ? Boolean.TRUE : inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) ? Boolean.FALSE : (Boolean) null) == null || (!(inp1_ <= inp2_ || v4 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || null) || (inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.gt(inp8_0, inp0_) || v4 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) || v10 ? Boolean.TRUE : inp8_0 == null || inp0_ == null || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) ? (Boolean) null : Boolean.FALSE) == null ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE};
            }

          };
      }

    };
}


public Class getElementType() {
  return java.lang.Object[].class;
}



	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:161)
	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable().aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, Object[] in) {
      final java.math.BigDecimal inp6_ = in[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(in[6]);
      if (inp6_ != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, inp6_);
      }
      acc.f2++;
      if (inp6_ != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final java. (stack truncated)
!ok
EnumerableCalc(expr#0..10=[{inputs}], expr#11=[0], expr#12=[=($t1, $t11)], expr#13=[false], expr#14=[CAST($t13):BOOLEAN], expr#15=[AND($t12, $t14)], expr#16=[<=($t8, $t0)], expr#17=[IS TRUE($t16)], expr#18=[true], expr#19=[CAST($t18):BOOLEAN], expr#20=[NOT($t12)], expr#21=[AND($t17, $t19, $t20)], expr#22=[>($t1, $t2)], expr#23=[null], expr#24=[CAST($t23):BOOLEAN], expr#25=[NOT($t17)], expr#26=[AND($t22, $t24, $t20, $t25)], expr#27=[NOT($t22)], expr#28=[AND($t16, $t20, $t25, $t27)], expr#29=[OR($t15, $t21, $t26, $t28)], expr#30=[NOT($t29)], EMPNO=[$t3], ENAME=[$t4], JOB=[$t5], MGR=[$t6], HIREDATE=[$t7], SAL=[$t8], COMM=[$t9], DEPTNO=[$t10], X=[$t30])
  EnumerableJoin(condition=[true], joinType=[inner])
    EnumerableAggregate(group=[{}], m=[MAX($6)], c=[COUNT()], d=[COUNT($6)])
      EnumerableTableScan(table=[[scott, EMP]])
    EnumerableTableScan(table=[[scott, EMP]])
!plan

# NOT SOME; left side NOT NULL, right side nullable; converse of previous query.
select * from "scott".emp
where not sal <= some (select comm from "scott".emp);

+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

# Similar, as scalar sub-query.
select *, sal <= some (select comm from "scott".emp) as x
from "scott".emp;

java.sql.SQLException: Error while executing SQL "select *, sal <= some (select comm from "scott".emp) as x
from "scott".emp": Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable().aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, Object[] in) {
      final java.math.BigDecimal inp6_ = in[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(in[6]);
      if (inp6_ != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, inp6_);
      }
      acc.f2++;
      if (inp6_ != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final java.math.BigDecimal inp8_0 = current[8] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[8]);
              final java.math.BigDecimal inp0_ = current[0] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[0]);
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final boolean v0 = inp1_ != 0L;
              final long inp2_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[2]);
              final boolean v8 = inp1_ <= inp2_;
              return new Object[] {
                  current[3],
                  current[4],
                  current[5],
                  current[6],
                  current[7],
                  current[8],
                  current[9],
                  current[10],
                  inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) && v0 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) && v0 && !(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) && v8 ? Boolean.TRUE : (inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) && v0 ? (inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE) == null || (inp1_ > inp2_ && v0 && !(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || $L4J$C$_null) || ((inp8_0 == null || inp0_ == null || org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) && v0 && !(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) && v8 ? (inp8_0 == null || inp0_ == null || !(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE) == null ? (Boolean) null : Boolean.FALSE};
            }

            static final Object $L4J$C$_null = !null;
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Object[].class;
}



	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:161)
	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable().aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, Object[] in) {
      final java.math.BigDecimal inp6_ = in[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(in[6]);
      if (inp6_ != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, inp6_);
      }
      acc.f2++;
      if (inp6_ != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final java.math.BigDecimal inp8_0 = current[8] = (stack truncated)
!ok

# Sub-query is empty, so "< all" is trivially true. Even for null comm.
select * from "scott".emp
where comm < all (select comm from "scott".emp where 1 = 0)
order by empno;

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

# If sub-query is empty, "< some" is trivially false. Even for null comm.
select * from "scott".emp
where comm < some (select comm from "scott".emp where 1 = 0);

+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

select * from "scott".emp
where sal > all (select comm from "scott".emp where comm <> null);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

select * from "scott".emp
where sal > all(500, 2000);

+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7566 | JONES | MANAGER   | 7839 | 1981-02-04 | 2975.00 |      |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-01-05 | 2850.00 |      |     30 |
|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 |      |     10 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 |      |     20 |
|  7839 | KING  | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 |      |     20 |
+-------+-------+-----------+------+------------+---------+------+--------+
(6 rows)

!ok

select * from "scott".emp
where sal > all (4000, 2000);

+-------+-------+-----------+-----+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+-----+------------+---------+------+--------+
|  7839 | KING  | PRESIDENT |     | 1981-11-17 | 5000.00 |      |     10 |
+-------+-------+-----------+-----+------------+---------+------+--------+
(1 row)

!ok

select * from "scott".emp
where sal > some (4000, 2000);

+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7566 | JONES | MANAGER   | 7839 | 1981-02-04 | 2975.00 |      |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-01-05 | 2850.00 |      |     30 |
|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 |      |     10 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 |      |     20 |
|  7839 | KING  | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 |      |     20 |
+-------+-------+-----------+------+------------+---------+------+--------+
(6 rows)

!ok

select * from "scott".emp
where sal > any (4000, 2000);

+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7566 | JONES | MANAGER   | 7839 | 1981-02-04 | 2975.00 |      |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-01-05 | 2850.00 |      |     30 |
|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 |      |     10 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 |      |     20 |
|  7839 | KING  | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 |      |     20 |
+-------+-------+-----------+------+------------+---------+------+--------+
(6 rows)

!ok

select * from "scott".emp
where sal > (select sal * 2 from "scott".emp);
more than one value in agg SINGLE_VALUE
!error

select * from "scott".emp
where sal > any (select sal * 2 from "scott".emp)
order by sal desc;

+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7839 | KING  | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 |      |     20 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 |      |     20 |
|  7566 | JONES | MANAGER   | 7839 | 1981-02-04 | 2975.00 |      |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-01-05 | 2850.00 |      |     30 |
|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 |      |     10 |
+-------+-------+-----------+------+------------+---------+------+--------+
(6 rows)

!ok

select * from "scott".emp
where sal < all (select sal * 2 from "scott".emp)
order by sal desc;

+-------+--------+----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+----------+------+------------+---------+---------+--------+
|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7934 | MILLER | CLERK    | 7782 | 1982-01-23 | 1300.00 |         |     10 |
|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7876 | ADAMS  | CLERK    | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK    | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7369 | SMITH  | CLERK    | 7902 | 1980-12-17 |  800.00 |         |     20 |
+-------+--------+----------+------+------------+---------+---------+--------+
(7 rows)

!ok

# Equivalent to previous
select r.*,
  not case when m is not null then r.sal >= m
      when c > 0 then null
      else false end as c
from (select min(sal * 2) as m, count(*) as c from "scott".emp)
cross join "scott".emp as r
order by sal desc;
java.sql.SQLException: Error while executing SQL "select r.*,
  not case when m is not null then r.sal >= m
      when c > 0 then null
      else false end as c
from (select min(sal * 2) as m, count(*) as c from "scott".emp)
cross join "scott".emp as r
order by sal desc": Error while compiling generated Java code:
public static class Record3_3 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public Record3_3() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_3)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record3_3) o).f0) && this.f1 == ((Record3_3) o).f1 && this.f2 == ((Record3_3) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_3 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable();
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            final Object[] current = (Object[]) inputEnumerator.current();
            final java.math.BigDecimal inp5_ = current[5] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[5]);
            final java.math.BigDecimal v = $L4J$C$new_java_math_BigDecimal_2_;
            return inp5_ == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.multiply(inp5_, v);
          }

          static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_2_ = new java.math.BigDecimal(
            2);
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      Record3_3 record0;
      record0 = new Record3_3();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_3 apply(Record3_3 acc, java.math.BigDecimal in) {
      if (in != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.lesser(acc.f0, in);
      }
      acc.f2++;
      return acc;
    }
    public Record3_3 apply(Object acc, Object in) {
      return apply(
        (Record3_3) acc,
        (java.math.BigDecimal) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_3 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_3) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            final Object[] current = (Object[]) inputEnumerator.current();
            final java.math.BigDecimal inp0_ = current[0] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[0]);
            final java.math.BigDecimal inp7_0 = current[7] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[7]);
            return new Object[] {
                current[2],
                current[3],
                current[4],
                current[5],
                current[6],
                current[7],
                current[8],
                current[9],
                inp0_ == null || (inp7_0 == null || inp0_ == null || org.apache.calcite.runtime.SqlFunctions.lt(inp7_0, inp0_)) ? ((inp0_ == null || inp7_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp7_0, inp0_) ? Boolean.TRUE : inp0_ == null || (inp7_0 == null || inp0_ == null) ? (Boolean) null : Boolean.FALSE) == null || (!(org.apache.calcite.runtime.SqlFunctions.toLong(current[1]) <= 0L || inp0_ != null) || null) ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE};
          }

        };
    }

  };
  return child0.orderBy(new org.apache.calcite.linq4j.function.Function1() {
      public java.math.BigDecimal apply(Object[] v) {
        return v[5] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(v[5]);
      }
      public Object apply(Object v) {
        return apply(
          (Object[]) v);
      }
    }
    , org.apache.calcite.linq4j.function.Functions.nullsComparator(true, true));
}


public Class getElementType() {
  return java.lang.Object[].class;
}



	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:161)
	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
public static class Record3_3 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public Record3_3() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_3)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record3_3) o).f0) && this.f1 == ((Record3_3) o).f1 && this.f2 == ((Record3_3) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_3 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable();
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            final Object[] current = (Object[]) inputEnumerator.current();
            final java.math.BigDecimal inp5_ = current[5] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[5]);
            final java.math.BigDecimal v = $L4J$C$new_java_math_BigDecimal_2_;
            return inp5_ == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.multiply(inp5_, v);
          }

          static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_2_ = new java.math.BigDecimal(
            2);
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      Record3_3 record0;
      record0 = new Record3_3();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_3 apply(Record3_3 acc, java.math.BigDecimal in) {
      if (in != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.lesser(acc.f0, in);
      }
      acc.f2++;
      return acc;
    }
    public Record3_3 apply(Object acc, Object in) {
      return apply(
        (Record3_3) acc,
        (java.math.BigDecimal) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_3 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_3) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right)  (stack truncated)
!ok

select * from "scott".emp
where sal < all (select comm * 2 from "scott".emp);

+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

select * from "scott".emp
where sal < any (select comm * 2 from "scott".emp)
order by empno;

+-------+--------+----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK    | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK    | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK    | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7934 | MILLER | CLERK    | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+----------+------+------------+---------+---------+--------+
(9 rows)

!ok

# Oracle gives error, but I believe the statement is valid.
# It should return all rows.
select * from "scott".emp
where sal < any (select comm * 2 from "scott".emp) is unknown;

java.sql.SQLException: Error while executing SQL "select * from "scott".emp
where sal < any (select comm * 2 from "scott".emp) is unknown": Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable();
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            final Object[] current = (Object[]) inputEnumerator.current();
            final java.math.BigDecimal inp6_ = current[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[6]);
            final java.math.BigDecimal v = $L4J$C$new_java_math_BigDecimal_2_;
            return inp6_ == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.multiply(inp6_, v);
          }

          static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_2_ = new java.math.BigDecimal(
            2);
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, java.math.BigDecimal in) {
      if (in != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, in);
      }
      acc.f2++;
      if (in != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (java.math.BigDecimal) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              while (inputEnumerator.moveNext()) {
                final Object[] current = (Object[]) inputEnumerator.current();
                final java.math.BigDecimal inp8_ = current[8] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[8]);
                final java.math.BigDecimal inp0_ = current[0] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[0]);
                final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
                final boolean v0 = inp1_ != 0L;
                final long inp2_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[2]);
                final boolean v8 = inp1_ <= inp2_;
                if ((inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_) && v0 || inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_) && v0 && !(inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_)) && v8 ? Boolean.TRUE : (inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_) && v0 ? (inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_) ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE) == null || (inp1_ > inp2_ && v0 && !(inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_)) || $L4J$C$_null) || ((inp8_ == null || inp0_ == null || org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_)) && v0 && !(inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_)) && v8 ? (inp8_ == null || inp0_ == null || !(inp8_ != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.lt(inp8_, inp0_)) ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE) == null ? (Boolean) null : Boolean.FALSE) == null) {
                  return true;
                }
              }
              return false;
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              return new Object[] {
                  current[3],
                  current[4],
                  current[5],
                  current[6],
                  current[7],
                  current[8],
                  current[9],
                  current[10]};
            }

            static final Object $L4J$C$_null = !null;
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Object[].class;
}



	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:161)
	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable();
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            final Object[] current = (Object[]) inputEnumerator.current();
            final java.math.BigDecimal inp6_ = current[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[6]);
            final java.math.BigDecimal v = $L4J$C$new_java_math_BigDecimal_2_;
            return inp6_ == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.multiply(inp6_, v);
          }

          static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_2_ = new java.math.BigDecimal(
            2);
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, java.math.BigDecimal in) {
      if (in != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, in);
      }
      acc.f2++;
      if (in != null) {
        acc.f3++;
      (stack truncated)
!ok

# Oracle gives error, but I believe the statement is valid and result is correct.
select *, sal > all(select comm from "scott".emp) as x from "scott".emp;

java.sql.SQLException: Error while executing SQL "select *, sal > all(select comm from "scott".emp) as x from "scott".emp": Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable().aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, Object[] in) {
      final java.math.BigDecimal inp6_ = in[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(in[6]);
      if (inp6_ != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, inp6_);
      }
      acc.f2++;
      if (inp6_ != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final java.math.BigDecimal inp8_0 = current[8] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[8]);
              final java.math.BigDecimal inp0_ = current[0] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(current[0]);
              final boolean v4 = inp1_ == 0L;
              final long inp2_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[2]);
              final boolean v10 = inp1_ > inp2_;
              return new Object[] {
                  current[3],
                  current[4],
                  current[5],
                  current[6],
                  current[7],
                  current[8],
                  current[9],
                  current[10],
(                  !(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || v4) && (inp8_0 == null || inp0_ == null || org.apache.calcite.runtime.SqlFunctions.gt(inp8_0, inp0_) || v4 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) || v10) ? (null || (!(inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || v4 ? Boolean.TRUE : inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) ? Boolean.FALSE : (Boolean) null) == null || (!(inp1_ <= inp2_ || v4 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_)) || null) || (inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.gt(inp8_0, inp0_) || v4 || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) || v10 ? Boolean.TRUE : inp8_0 == null || inp0_ == null || inp8_0 != null && inp0_ != null && org.apache.calcite.runtime.SqlFunctions.le(inp8_0, inp0_) ? (Boolean) null : Boolean.FALSE) == null ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE};
            }

          };
      }

    };
}


public Class getElementType() {
  return java.lang.Object[].class;
}



	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:161)
	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
public static class Record4_1 implements java.io.Serializable {
  public java.math.BigDecimal f0;
  public boolean f1;
  public long f2;
  public long f3;
  public Record4_1() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record4_1)) {
      return false;
    }
    return java.util.Objects.equals(this.f0, ((Record4_1) o).f0) && this.f1 == ((Record4_1) o).f1 && this.f2 == ((Record4_1) o).f2 && this.f3 == ((Record4_1) o).f3;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
    return h;
  }

  public int compareTo(Record4_1 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compareNullsLast(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable().aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      java.math.BigDecimal a0s0;
      boolean a0s1;
      a0s1 = false;
      a0s0 = (java.math.BigDecimal) null;
      long a1s0;
      a1s0 = 0L;
      long a2s0;
      a2s0 = 0L;
      Record4_1 record0;
      record0 = new Record4_1();
      record0.f0 = a0s0;
      record0.f1 = a0s1;
      record0.f2 = a1s0;
      record0.f3 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record4_1 apply(Record4_1 acc, Object[] in) {
      final java.math.BigDecimal inp6_ = in[6] == null ? (java.math.BigDecimal) null : org.apache.calcite.runtime.SqlFunctions.toBigDecimal(in[6]);
      if (inp6_ != null) {
        acc.f1 = true;
        acc.f0 = (java.math.BigDecimal) org.apache.calcite.runtime.SqlFunctions.greater(acc.f0, inp6_);
      }
      acc.f2++;
      if (inp6_ != null) {
        acc.f3++;
      }
      return acc;
    }
    public Record4_1 apply(Object acc, Object in) {
      return apply(
        (Record4_1) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record4_1 acc) {
      return new Object[] {
          acc.f1 ? acc.f0 : (java.math.BigDecimal) null,
          acc.f2,
          acc.f3};
    }
    public Object apply(Object acc) {
      return apply(
        (Record4_1) acc);
    }
  }
  )).join(org.apache.calcite.schema.Schemas.queryable(root, root.getRootSchema().getSubSchema("scott"), java.lang.Object[].class, "EMP").asEnumerable(), new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public org.apache.calcite.runtime.FlatLists.ComparableEmptyList apply(Object[] v1) {
      return org.apache.calcite.runtime.FlatLists.COMPARABLE_EMPTY_LIST;
    }
    public Object apply(Object v1) {
      return apply(
        (Object[]) v1);
    }
  }
  , new org.apache.calcite.linq4j.function.Function2() {
    public Object[] apply(Object[] left, Object[] right) {
      return new Object[] {
          left[0],
          left[1],
          left[2],
          right[0],
          right[1],
          right[2],
          right[3],
          right[4],
          right[5],
          right[6],
          right[7]};
    }
    public Object[] apply(Object left, Object right) {
      return apply(
        (Object[]) left,
        (Object[]) right);
    }
  }
  , null, false, false);
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final java.m (stack truncated)
!ok

select * from "scott".emp
where sal > all (select comm from "scott".emp);

+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

select * from "scott".emp
where sal > any (select comm from "scott".emp);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

select * from "scott".emp
where sal > any (select comm from "scott".emp where comm < 1000);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

select * from "scott".emp
where sal > any (select comm from "scott".emp where comm < 2000);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

select * from "scott".emp
where sal > any (select comm * 2 from "scott".emp where comm < 2000);

+-------+--------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+-----------+------+------------+---------+---------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |
+-------+--------+-----------+------+------------+---------+---------+--------+
(14 rows)

!ok

select * from "scott".emp
where sal > all (select comm * 2 from "scott".emp where comm < 2000);

+-------+-------+-----------+------+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+------+------------+---------+------+--------+
|  7566 | JONES | MANAGER   | 7839 | 1981-02-04 | 2975.00 |      |     20 |
|  7698 | BLAKE | MANAGER   | 7839 | 1981-01-05 | 2850.00 |      |     30 |
|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 |      |     20 |
|  7839 | KING  | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |
|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 |      |     20 |
+-------+-------+-----------+------+------------+---------+------+--------+
(5 rows)

!ok

select * from "scott".emp
where sal > all (select comm from "scott".emp where comm is not null);

+-------+--------+-----------+------+------------+---------+--------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM   | DEPTNO |
+-------+--------+-----------+------+------------+---------+--------+--------+
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 | 300.00 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |        |     20 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |        |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |        |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |        |     20 |
|  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |        |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |   0.00 |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |        |     20 |
+-------+--------+-----------+------+------------+---------+--------+--------+
(8 rows)

!ok

# End some.iq

